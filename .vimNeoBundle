" **********************
" NeoBundle Setting File
" **********************
let mapleader = ','

if has('vim_starting')
  set nocompatible
  " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'aharisu/vim-gdev' "LiSP系
NeoBundle 'aharisu/vim_goshrepl' "LiSP系
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'cohama/agit.vim'
NeoBundle 'derekwyatt/vim-scala'
NeoBundle 'fatih/vim-go'
NeoBundle 'int3/vim-extradite'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'itchyny/landscape.vim'
NeoBundle 'kannokanno/previm'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'osyo-manga/vim-anzu'
NeoBundle 'othree/html5.vim'
NeoBundle 'rompetroll/vim-scalariform'
NeoBundle 'soramugi/auto-ctags.vim'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-visualstar'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tyru/caw.vim'
NeoBundle 'tyru/open-browser.vim'
NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Yggdroot/indentLine'

NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \ 'windows' : 'make -f make_mingw32.mak',
      \ 'cygwin' : 'make -f make_cygwin.mak',
      \ 'mac' : 'make -f make_mac.mak',
      \ 'unix' : 'make -f make_unix.mak',
      \ },
      \ }

" jazzradio.vim
NeoBundleLazy 'supermomonga/jazzradio.vim', { 'depends' : [ 'Shougo/unite.vim' ] }
if neobundle#tap('jazzradio.vim')
  call neobundle#config({
        \   'autoload' : {
        \     'unite_sources' : [
        \       'jazzradio'
        \     ],
        \     'commands' : [
        \       'JazzradioUpdateChannels',
        \       'JazzradioStop',
        \       {
        \         'name' : 'JazzradioPlay',
        \         'complete' : 'customlist,jazzradio#channel_key_complete'
        \       }
        \     ],
        \     'function_prefix' : 'jazzradio'
        \   }
        \ })
endif

" neocomplete
let g:neocomplete#force_overwrite_completefunc = 1
" neocomplete用設定
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns._ = '\h\w*'
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

" indentLine
let g:indentLine_color_term = 239
let g:indentLine_color_dark = 1
let g:indentLine_char = "|"
set list lcs=tab:\¦\

" html5.vim
let g:html5_event_handler_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_aria_attributes_complete = 1

" unite.vim
let g:unite_enable_start_insert = 1
let g:unite_enable_split_vertically = 0
let g:unite_winwidth = 40
nmap <Space> [Unite]
nnoremap [Unite]f :<C-u>UniteWithBufferDir -buffer-name=files file file/new<CR>
nnoremap [Unite]m :<C-u>Unite  file_mru <CR>
nnoremap [Unite]rc :<C-u>Unite file_rec/async:app/controllers/ <CR>
nnoremap [Unite]rfc :<C-u>Unite file file/new -input=app/controllers/ <CR>
nnoremap [Unite]rm :<C-u>Unite file_rec/async:app/models/ <CR>
nnoremap [Unite]rfm :<C-u>Unite file file/new -input=app/models/ <CR>
nnoremap [Unite]rv :<C-u>Unite file_rec/async:app/views/ <CR>
nnoremap [Unite]rfv :<C-u>Unite file file/new -input=app/views/ <CR>
nnoremap [Unite]rs :<C-u>Unite file_rec/async:app/assets/stylesheets/ <CR>
nnoremap [Unite]rfs :<C-u>Unite file file/new -input=app/assets/stylesheets/ <CR>
nnoremap [Unite]rj :<C-u>Unite file_rec/async:app/assets/javascripts/ <CR>
nnoremap [Unite]rfj :<C-u>Unite file file/new -input=app/assets/javascripts/ <CR>
nnoremap [Unite]ro :<C-u>Unite file_rec/async:config/ <CR>
nnoremap [Unite]rfo :<C-u>Unite file file/new -input=config/ <CR>
nnoremap [Unite]rl :<C-u>Unite file_rec/async:lib/ <CR>
nnoremap [Unite]rfl :<C-u>Unite file file/new -input=lib/ <CR>
nnoremap [Unite]rr :<C-u>Unite file_rec/async:spec/ <CR>
nnoremap [Unite]rfr :<C-u>Unite file file/new -input=spec/ <CR>

" caw.vim
nmap <Leader>c <Plug>(caw:i:toggle)$
vmap <Leader>c <Plug>(caw:i:toggle)$

call neobundle#end()

" Vim-LaTeXの設定
let tex_flavor='latex'
set grepprg=grep\ -nH\ $*
set shellslash
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_dvi='platex --interaction=nonstopmode $*'
let g:Tex_CompileRule_pdf='dvipdfmx $*.dvi'
let g:Tex_FormatDependency_pdf='dvi,pdf'
let g:Tex_ViewRule_pdf='open -a Preview.app'

" previm
let g:previm_open_cmd = 'open -a Google\ Chrome'
augroup PrevimSettings
  autocmd!
  autocmd BufNewFile,BufRead *.{md,txt,mdwn,mkd,mkdn,mark*} set filetype=markdown
  nnoremap [previm] <Nop>
  nmap <Leader>p [previm]
  nnoremap <silent> [previm]o :<C-u>PrevimOpen<CR>
  nnoremap <silent> [previm]r :call previm#refresh()<CR>
augroup END

" gitgutter
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" vim-anzu
nmap n <Plug>(anzu-n)
nmap N <Plug>(anzu-N)
nmap * <Plug>(anzu-star)
nmap # <Plug>(anzu-sharp)
augroup vim-anzu
  " 一定時間キー入力がないとき、ウインドウを移動したとき、タブを移動したときに
  " 検索ヒット数の表示を消去する
  autocmd!
  autocmd CursorHold,CursorHoldI,WinLeave,TabLeave * call anzu#clear_search_status()
augroup END

" lightLline.vim
source ~/dotfiles/.vimStatusLine

